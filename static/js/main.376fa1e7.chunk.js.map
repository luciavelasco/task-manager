{"version":3,"sources":["dummyData.ts","App.tsx","atoms/Pill.tsx","atoms/Label.tsx","atoms/TaskButton.tsx","taskValidator.ts","molecules/TaskEdit.tsx","molecules/Task.tsx","serviceWorker.ts","index.tsx"],"names":["PriorityEnum","StatusEnum","availablePriorities","LOW","MEDIUM","HIGH","ActionEnum","availableStatuses","InProgress","Complete","Assigned","dummyTask","priority","status","abxTaskId","organisationTaskId","organisationId","taskStatus","assignedto","timestamp","Date","latitude","longitude","tasksummary","taskdescription","tasks","Pill","children","className","Label","label","value","TaskButton","onClick","halfSize","fieldToLabel","constraints","numericality","presence","allowEmpty","exclusion","within","message","inclusion","type","datetime","lessThanOrEqualTo","greaterThanOrEqualTo","length","maximum","validateTask","task","validate","parse","format","errors","labels","Object","keys","map","field","hasOwnProperty","values","reduce","p","v","i","errorMessage","formatErrors","emptyTask","TaskEdit","onClose","onSave","useState","setErrors","taskUpdate","setTaskUpdate","update","key","join","onChange","target","d","disableClock","clearIcon","disabled","max","min","validationErrors","newTask","getDateText","getDate","Task","onEdit","isEditing","setIsEditing","isExpanded","setExpansion","toLocaleTimeString","slice","toLowerCase","reducer","prevState","action","UpdateTask","payload","id","CreateTask","DeleteTask","newState","GetTasksByOrganisation","App","createOpen","setCreateOpen","initialState","prev","useReducer","state","dispatch","reverse","taskId","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.376fa1e7.chunk.js","sourcesContent":["export interface ITask {\n  // Task Id used internally\n  abxTaskId: number\n  organisationTaskId: number\n  organisationId: number\n  priority: PriorityEnum\n  taskStatus: string\n  // vehicle id associated with the task\n  assignedto: string\n  // When the incident happened\n  timestamp: Date\n  latitude: number\n  longitude: number\n  // short summary to be displayed in task lists\n  tasksummary: string\n  // full description of what the task is about\n  taskdescription: string\n\n}\n\n/*\n Arrays to make the F/E more maintainable by only having to update options in one file\n */\nexport enum PriorityEnum {\n  LOW = 'LOW',\n  MEDIUM = 'MEDIUM',\n  HIGH = 'HIGH'\n}\nexport const availablePriorities: PriorityEnum[] = [\n  PriorityEnum.LOW,\n  PriorityEnum.MEDIUM,\n  PriorityEnum.HIGH\n]\n\nexport enum StatusEnum {\n  InProgress = 'In Progress',\n  Complete = 'Complete',\n  Assigned = 'Assigned'\n}\nexport const availableStatuses: StatusEnum[] = [\n  StatusEnum.InProgress,\n  StatusEnum.Complete,\n  StatusEnum.Assigned\n]\n\nexport const dummyTask = (priority: PriorityEnum, status: StatusEnum): ITask => ({\n  abxTaskId: 123,\n  organisationTaskId: 321,\n  organisationId: 3,\n  priority: priority,\n  taskStatus: status,\n  assignedto: 'AAA11AA',\n  timestamp: new Date(),\n  latitude: -150.321,\n  longitude: 39.321,\n  tasksummary: 'Unspecified first aid emergency',\n  taskdescription: 'Leverage agile frameworks to provide a robust synopsis ' +\n    'for high level overviews. Iterative approaches to corporate strategy foster ' +\n    'collaborative thinking to further the overall value proposition. Organically grow ' +\n    'the holistic world view of disruptive innovation via workplace diversity and empowerment.'\n})\nexport const tasks = [\n  dummyTask(PriorityEnum.LOW, StatusEnum.InProgress),\n  dummyTask(PriorityEnum.HIGH, StatusEnum.Assigned),\n  dummyTask(PriorityEnum.MEDIUM, StatusEnum.Assigned),\n  dummyTask(PriorityEnum.HIGH, StatusEnum.InProgress),\n  dummyTask(PriorityEnum.LOW, StatusEnum.Complete),\n  dummyTask(PriorityEnum.LOW, StatusEnum.Complete),\n  dummyTask(PriorityEnum.MEDIUM, StatusEnum.InProgress) ]\n\nexport interface IResponse<T = any> {\n  status: number,\n  body?: T\n}\n\nconst response = <T>(status = 200, body?: T): IResponse<T> =>\n  ({ status, body })\n\n// tasks\nexport const getAllTasks = (): IResponse<ITask[]> =>\n  response(201, tasks) // GET\n\nexport const createTask = (task: ITask[]): IResponse =>\n  response(201) // POST\n\n// tasks/organisations/{organisationId}\nexport const getTasksByOrganisation = (organisationId: number): IResponse<ITask[]> =>\n  response(201, tasks) // GET\n\n// tasks/organisations/{organisationId}/{callerId}/\n// note: accessId in request header\nexport const getTasksByCaller = (organisationId: number, callerId: number, accessId: number): IResponse<ITask[]> =>\n  response(200, tasks) // GET\n\n// tasks/organisations/{organisationId}/{callerId}/latest\nexport const getLatestTaskByCaller = (organisationId: number, callerId: number, accessId: number): IResponse<ITask> =>\n  response(200, dummyTask(PriorityEnum.MEDIUM, StatusEnum.InProgress)) // GET\n\n// tasks/{abxTaskId}/\nexport const deleteTask = (abxTaskId: number): IResponse =>\n  response(204) // DELETE\n\nexport const getTask = (abxTaskId: number): IResponse<ITask> =>\n  response(200, dummyTask(PriorityEnum.MEDIUM, StatusEnum.InProgress)) // GET\n\nexport const updateTask = (abxTaskId: number, task: ITask) =>\n  response(201) // PUT\n","import React, { Reducer, useReducer, useState } from 'react'\nimport './App.css'\nimport { ITask, tasks } from './dummyData'\nimport { Task } from './molecules/Task'\nimport { TaskEdit } from './molecules/TaskEdit'\nimport { TaskButton } from './atoms/TaskButton'\n\ninterface ITaskState {\n  [ id: string ]: ITask\n}\n\ninterface IAction<T, P> {\n  type: T,\n  payload: P\n}\n\nexport enum ActionEnum {\n  UpdateTask,\n  CreateTask,\n  DeleteTask,\n  GetTasksByOrganisation\n}\n\ntype TActions =\n  IAction<ActionEnum.UpdateTask, { id: string, task: ITask }>\n  | IAction<ActionEnum.CreateTask, ITask>\n  | IAction<ActionEnum.DeleteTask, { id: string }>\n  | IAction<ActionEnum.GetTasksByOrganisation, { organisationId: number }>\n\n// Ordinarily I would have a reducer directory with files for sub-reducers, but for the purposes of\n// a compact entrypoint to review this code, I have provided the reducer (and relevant types, Enums\n// and interfaces) here\nconst reducer: Reducer<ITaskState, TActions> = (prevState, action) => {\n  switch (action.type) {\n    case ActionEnum.UpdateTask:\n      return { ...prevState, [ action.payload.id ]: action.payload.task }\n    case ActionEnum.CreateTask:\n      return { ...prevState, [ Object.keys(prevState).length ]: action.payload }\n    case ActionEnum.DeleteTask:\n      // to avoid mutation\n      const newState = { ...prevState }\n      delete newState[ action.payload.id ]\n      return newState\n    case ActionEnum.GetTasksByOrganisation:\n      // Goes to the api and gets the task by the organisation\n      // which updates the states in the App view.\n      // The same for Tasks by caller, latest task, etc\n      return prevState\n    default:\n      return prevState\n  }\n}\n\nfunction App() {\n  const [ createOpen, setCreateOpen ] = useState(false)\n  // ordinarily would be populated by an async request to the API\n  const initialState = tasks.reduce((prev, task, i) => ({ ...prev, [ i ]: task }), {})\n  const [ state, dispatch ] = useReducer(reducer, initialState)\n\n  return (\n    <div className=\"app\">\n      <header className=\"app-header\">\n        <h1>Task Manager</h1>\n      </header>\n      <main className=\"app-body\">\n\n        {/* If this were a larger app with routing I would pull the router in here */}\n        {createOpen ? <TaskEdit\n            onSave={newTask => {\n              dispatch({ type: ActionEnum.CreateTask, payload: newTask })\n              setCreateOpen(false)\n            }}\n            onClose={() => setCreateOpen(false)}/>\n          :\n          <>\n            <TaskButton className={'create-button'} onClick={() => setCreateOpen(true)}>\n              Create New Task\n            </TaskButton>\n\n            {Object.keys(state).reverse().map((taskId, i) =>\n              <Task\n                key={i}\n                task={state[ taskId ]}\n                onEdit={(newTask) =>\n                  dispatch({ type: ActionEnum.UpdateTask, payload: { id: taskId, task: newTask } })}\n              />)}\n\n          </>}\n      </main>\n    </div>\n  )\n}\n\nexport default App\n","import React, { FunctionComponent } from 'react'\nimport './Pill.css'\n\nexport const Pill: FunctionComponent = ({ children }) =>\n  <span className=\"pill\">\n      {children}\n    </span>\n\n","import React, { FunctionComponent } from 'react'\nimport './Label.css'\n\nexport interface ILabelOwnProps {\n  label: string | number,\n  value: string | number\n}\n\nexport const Label: FunctionComponent<ILabelOwnProps> = ({ label, value }) =>\n  <span>\n    <span className=\"label\">{label}: </span>\n    <span className=\"value\">{value}</span>\n  </span>\n","import React, { FunctionComponent, MouseEventHandler } from 'react'\nimport './TaskButton.css'\n\ninterface ITaskButtonOwnProps {\n  halfSize?: boolean\n  onClick: () => any\n  className?: string\n}\n\nexport const TaskButton: FunctionComponent<ITaskButtonOwnProps> =\n  ({ children, className, onClick, halfSize }) =>\n    <button className={`button ${halfSize ? 'half-size' : ''} ${className}`} onClick={onClick}>{children}</button>\n","import { ITask, PriorityEnum } from './dummyData'\nimport * as validate from 'validate.js'\n\n// TODO: Extend Validate.JS with reusable, TypeScript-tight functionality for all in-house projects to use\n\n\n// TODO: Refactor Task and TaskEdit to use this fieldToLabel for consistency\nconst fieldToLabel: { [ key: string ]: string } = {\n  abxTaskId: 'Task ID',\n  organisationTaskId: 'Organisation\\'s Task ID',\n  organisationId: 'Organisation ID',\n  priority: 'Priority',\n  taskStatus: 'Status',\n  assignedto: 'Assigned Vehicle ID',\n  timestamp: 'Incident Date/Time',\n  latitude: 'Latitude',\n  longitude: 'Longitude',\n  tasksummary: 'Task Summary',\n  taskdescription: 'Task Description'\n}\n\nconst constraints = {\n  organisationId: {\n    numericality: true\n  },\n  priority: {\n    presence: {\n      allowEmpty: false\n    },\n    exclusion: {\n      within: [ 'none' ],\n      message: 'Please set the priority of this task.'\n    },\n    inclusion: [ PriorityEnum.LOW, PriorityEnum.MEDIUM, PriorityEnum.HIGH ]\n  },\n  taskStatus: {\n    presence: {\n      allowEmpty: false\n    },\n    exclusion: {\n      within: [ 'none' ],\n      message: 'Please set the status of this task.'\n    },\n    type: 'string'\n  },\n  assignedto: {\n    presence: {\n      allowEmpty: false\n    },\n    type: 'string'\n  },\n  timestamp: {\n    presence: {\n      allowEmpty: false\n    },\n    datetime: true\n  },\n  latitude: {\n    presence: {\n      allowEmpty: false\n    },\n    numericality: {\n      lessThanOrEqualTo: 180,\n      greaterThanOrEqualTo: -180\n    }\n  },\n  longitude: {\n    presence: {\n      allowEmpty: false\n    },\n    numericality: {\n      lessThanOrEqualTo: 90,\n      greaterThanOrEqualTo: -90\n    }\n  },\n  tasksummary: {\n    presence: {\n      allowEmpty: false\n    },\n    type: 'string',\n    length: {\n      maximum: 255\n    }\n  },\n  taskdescription: {\n    presence: {\n      allowEmpty: false\n    },\n    type: 'string'\n  }\n}\n\nconst formatErrors = (errors?: { [ key: string ]: string[] }): string[] => {\n  if (typeof errors !== 'object') return []\n  const labels = Object.keys(errors).map(field =>\n    fieldToLabel.hasOwnProperty(field) ? fieldToLabel[ field ] as string : 'Unknown')\n  return Object.values(errors).reduce((p, v, i) =>\n    [ ...p, ...v.map(errorMessage => `${labels[ i ]}: ${errorMessage}`) ], [])\n}\n\nexport const validateTask = (task: Partial<ITask>): string[] => {\n  // Before using it we must add the parse and format functions\n  validate.extend(validate.validators.datetime, {\n    // The value is guaranteed not to be null or undefined but otherwise it\n    // could be anything.\n    // NB: This is a lazy implementation.\n    parse: function (value: unknown) {\n      return Date.parse(value as string)\n    },\n    // Input is a unix timestamp\n    format: function (value: unknown) {\n      return Date.parse(value as string)\n    }\n  })\n\n  // TODO: Create custom error messages to use only this label by default (not %{Label}: ${Fieldname} ${errorMessage})\n  return formatErrors(validate.validate(task, constraints))\n}\n","import React, { FunctionComponent, MouseEventHandler, useState } from 'react'\nimport './Task.css'\nimport './TaskEdit.css'\nimport { availablePriorities, availableStatuses, ITask, PriorityEnum } from '../dummyData'\nimport DateTimePicker from 'react-datetime-picker'\nimport { TaskButton } from '../atoms/TaskButton'\nimport { validateTask } from '../taskValidator'\n\nexport interface ITaskOwnProps {\n  task?: ITask\n  onClose: () => any\n  onSave: (newTask: ITask) => any\n  className?: string\n}\n\nexport const emptyTask: Partial<ITask> = ({\n  assignedto: '',\n  timestamp: new Date(),\n  latitude: 0,\n  longitude: 0,\n  tasksummary: '',\n  taskdescription: ''\n})\n\nexport const TaskEdit: FunctionComponent<ITaskOwnProps> = ({ task = emptyTask, onClose, onSave, className }) => {\n  const [ errors, setErrors ] = useState<string[]>([])\n  const [ taskUpdate, setTaskUpdate ] = useState(task)\n  const update = (key: string, value: unknown) => setTaskUpdate({ ...taskUpdate, [ key ]: value })\n\n  return (\n    <div className={[ taskUpdate.priority, 'task', className ].join(' ')}>\n      <div className=\"summary\">\n        <span>Summary</span>\n        <textarea\n          className=\"text-edit\"\n          value={taskUpdate.tasksummary}\n          onChange={v => update('tasksummary', v.target.value)}/>\n      </div>\n      <div className=\"task-line\">\n        {/* Use this Date Picker rather than <input type=\"datetime-picker\"/>\n            for better browser support, however this does not support older browsers\n            because that was not a requirement in the spec\n            */}\n        <label>Incident time <DateTimePicker\n          onChange={(d: Date) => update('timestamp', d)}\n          value={taskUpdate.timestamp}\n          disableClock={true}\n          clearIcon={null}\n        />\n        </label>\n        <label>Status <select\n          value={taskUpdate.taskStatus ?? 'none'}\n          onChange={v => update('taskStatus', v.target.value)}>\n          <option disabled value=\"none\"> -- select an option --</option>\n          {availableStatuses.map((v, i) => <option key={i} value={v}>{v}</option>)}\n        </select>\n        </label>\n        <label>Priority <select\n          value={taskUpdate.priority ?? 'none'}\n          onChange={v => update('priority', v.target.value as PriorityEnum)}>\n          <option disabled value=\"none\"> -- select an option --</option>\n          {availablePriorities.map((v, i) => <option key={i} value={v}>{v}</option>)}\n        </select>\n        </label>\n      </div>\n      <div className=\"task-line\">\n        <label>Vehicle ID <input\n          type=\"text\"\n          onChange={v => update('assignedto', v.target.value)}\n          value={taskUpdate.assignedto}/></label>\n        <label>Latitude <input\n          className=\"latlon-input\"\n          type=\"number\" max={180} min={-180}\n          onChange={v => update('latitude', v.target.value as unknown as number)}\n          value={taskUpdate.latitude}/></label>\n        <label>Longitude <input\n          className=\"latlon-input\"\n          type=\"number\" max={90} min={-90}\n          onChange={v => update('longitude', v.target.value as unknown as number)}\n          value={taskUpdate.longitude}/></label>\n      </div>\n      <div className=\"summary\">\n        Description <textarea\n        className=\"text-edit description\"\n        value={taskUpdate.taskdescription}\n        onChange={v => update('taskdescription', v.target.value)}/>\n      </div>\n\n      {!!errors.length && <>\n          <p className=\"danger-text\">Please fix these errors before saving:</p>\n        {errors.map((errorMessage, i) => <p key={i} className=\"danger-text\">{errorMessage}</p>)}\n      </>}\n\n      <div className=\"task-line\">\n        <TaskButton halfSize={true} className={'cancel-button'} onClick={onClose}>\n          Cancel\n        </TaskButton>\n        <TaskButton halfSize={true} onClick={() => {\n          const validationErrors = validateTask(taskUpdate)\n          if (validationErrors.length) {\n            setErrors(validationErrors)\n            return\n          }\n          /* Can't set organisation; no endpoint for list of organisation */\n          /* Can't set caller; no endpoint for caller list */\n          const newTask: ITask = {\n            // add in the data that would ordinarily be provided by the backend\n            // and filled back in the state by the response\n            abxTaskId: 123,\n            organisationTaskId: 321,\n            organisationId: 3,\n            ...taskUpdate\n          } as ITask\n          onSave(newTask)\n        }}>\n          {'abxTaskId' in taskUpdate ? 'Update Task' : 'Create Task'}\n        </TaskButton>\n      </div>\n    </div>\n  )\n}\n","import React, { FunctionComponent, useState } from 'react'\nimport './Task.css'\nimport { ITask } from '../dummyData'\nimport { Pill } from '../atoms/Pill'\nimport { Label } from '../atoms/Label'\nimport { TaskButton } from '../atoms/TaskButton'\nimport { TaskEdit } from './TaskEdit'\n\nexport interface ITaskOwnProps {\n  task: ITask,\n  onEdit: (newTask: ITask) => any\n}\n\nconst getDateText = (task: ITask) => task.timestamp.getDate() === new Date().getDate() ?\n  'Today' : task.timestamp.getDate()\n\nexport const Task: FunctionComponent<ITaskOwnProps> = ({ task, onEdit }) => {\n  const [ isEditing, setIsEditing ] = useState(false)\n  const [ isExpanded, setExpansion ] = useState(false)\n\n  return isEditing ?\n    <TaskEdit\n      onClose={() => setIsEditing(false)}\n      task={task}\n      onSave={newTask => {\n        onEdit(newTask)\n        setIsEditing(false)\n      }}/>\n    : (\n      <div className={[ task.priority, 'task' ].join(' ')}>\n        <p className=\"summary\">{task.tasksummary}</p>\n        <div className=\"task-line\">\n          <Label label=\"Time\" value={`${task.timestamp.toLocaleTimeString().slice(0, -3)} ${getDateText(task)}`}/>\n          <Label label=\"Status\" value={task.taskStatus}/>\n          <Pill>{task.priority.toLowerCase()}</Pill>\n        </div>\n        <div className=\"task-line\">\n          <Label label=\"Vehicle ID\" value={task.assignedto}/>\n          <Label label=\"Lat\" value={task.latitude}/>\n          <Label label=\"Lon\" value={task.longitude}/>\n        </div>\n        <div className=\"task-buttons expand-bar\">\n          <TaskButton className='see-more-button' onClick={() => setExpansion(!isExpanded)}>See more</TaskButton>\n          <TaskButton className='edit-button' onClick={() => setIsEditing(true)}>Edit</TaskButton>\n        </div>\n        {isExpanded && <div className=\"expand-contents\">{task.taskdescription}</div>}\n      </div>\n    )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}